#!/bin/sh

set -o nounset
set -o errexit

# update the version in the source files
# ARGS
#  1 - new version X.Y.Z
update() {
  # manual source markdown
  sed -i "s|denv v.*$|denv v${1}|" docs/src/manual.md
  # install script
  sed -i "s|^version=v.*$|version=v${1}|" install
  # denv itself
  sed -i "s|^denv_version=.*$|denv_version=${1}|" denv
}

# check if passed version string is a valid version
# ARGS
#  1 - version string to test
validate_version() {
  expr match "${1}" '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' > /dev/null
}

# check if there are any changes the user hasn't commited yet
check_changes() {
  # checks for any untracked or modified files
  git ls-files --other --modified --directory --exclude-standard > /dev/null | sed q1
}

error() {
  printf >&2 "\033[1;31mERROR: \033[0m\033[31m%s\033[0m\n" "$*"
}

inf() {
  printf "\033[1mINFO: \033[0m%s\n" "$*"
}

help() {
  cat<<\HELP

  update the version of denv across all places

 USAGE:

  ./ci/set-version X.Y.Z

 ARGUMENTS
  X.Y.Z : new version string to use

HELP
}

if [ "$#" -eq 0 ]; then
  help
  exit 0
fi

if [ "$#" -gt 1 ]; then
  help
  error "./ci/set-version requires one and only one argument"
  exit 1
fi

if ! validate_version "${1}"; then
  error "version string '${1}' does not match X.Y.Z"
  exit 1
fi

if check_changes; then
  error "Some untracked or modified files are still in the git area. Did you commit all the changes?"
  exit 1
fi

update "${1}"
git add docs/src/manual.md install denv
git commit -m "set version to v${1}"
git tag "v${1}"
git push --tags
