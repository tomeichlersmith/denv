#!/bin/sh

set -o nounset
set -o errexit

# update the version in the source files
# ARGS
#  1 - new version X.Y.Z
update() {
  # manual roff
  sed -i "s|denv v.*$|denv v${1}|" man/man1/denv.1
  # install script
  sed -i "s|^version=v.*$|version=v${1}|" install
  # denv itself
  sed -i "s|^denv_version=.*$|denv_version=${1}|" denv
}

# check if passed version string is a valid version
# ARGS
#  1 - version string to test
validate_version() {
  expr "${1}" : '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' > /dev/null
}

error() {
  printf >&2 "\033[1;31mERROR: \033[0m\033[31m%s\033[0m\n" "$*"
}

inf() {
  printf "\033[1mINFO: \033[0m%s\n" "$*"
}

help() {
  cat<<\HELP

  update the version of denv across all places

 USAGE:

  ./ci/set-version [options] X.Y.Z

 ARGUMENTS
  X.Y.Z : new version string to use

 OPTIONS
  -h, --help : print this help and exit

HELP
}

if [ "$#" -eq 0 ]; then
  help
  exit 0
fi

version=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    -*)
      error "Unrecognized option '$1'"
      exit 1
      ;;
    *)
      if [ -z "${version}" ]; then
        version="$1"
      else
        error "./ci/set-version only accepts a single argument"
        exit 1
      fi
      ;;
  esac
  shift
done

if [ -z "${version}" ]; then
  error "need to define the version we should use"
  exit 1
fi

if ! validate_version "${version}"; then
  error "version string '${version}' does not match X.Y.Z"
  exit 1
fi

update "${version}"
