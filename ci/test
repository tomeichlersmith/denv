#!/bin/sh
# testing script for denv, should not be installed with it
#   set DENV_RUNNER environment variable to the runner to use with denv
#   for the testing

# POSIX
set -o errexit
set -o nounset
#set -o xtrace

# disable denv prompt
export DENV_NOPROMPT=1

if [ -z "${1:-}" ]; then
  workspace=$(mktemp -d || true)
  delete=1
else
  workspace="${1}"
  mkdir "${workspace}"
  workspace="$(cd "${workspace}" && pwd -P)"
fi

inf() {
  printf "\033[1mINFO: \033[0m%s\n" "$*"
}

fail() {
  printf >&2 "\033[1;31mFAIL: \033[0m\033[31m%s\033[0m\n" "$*"
  if [ -n "${delete:+x}" ]; then
    cd
    rm -r "${workspace}"
  fi
  exit 1
}

pass() {
  printf "\033[1;32mPASS: \033[0m\033[32m%s\033[0m\n" "$*" 
}

check_pass() {
  # shellcheck disable=SC2068
  if ! $@ >check.log 2>&1; then
    cat check.log
    fail "$* failed to run"
  else
    pass "'$*' ran successfully"
  fi
}

check_fail() {
  # shellcheck disable=SC2068
  if $@ >check.log 2>&1; then
    cat check.log
    fail "'$*' passed when it should have failed"
  else
    pass "'$*' failed when it should have failed"
  fi
}

check_equal() {
  # when gathering the output of the container run
  # outside of the container, sometimes the carriage
  # part of the output is kept so we clean it out
  lhs="$($1 | tr -d '\r')"
  rhs="$($2 | tr -d '\r')"
  if test "${lhs}" != "${rhs}"; then
    fail "${lhs} != ${rhs} when comparing '${1}' and '${2}'"
  else
    pass "${lhs} == ${rhs} when comparing '${1}' and '${2}'"
  fi
}

cd "${workspace}"

# we assume user will set DENV_RUNNER when running tests
# shellcheck disable=SC2154
inf "Testing denv with ${DENV_RUNNER}"

# denv should fail since we haven't init'ed yet
check_fail denv
# can we init?
check_pass denv init ubuntu:22.04
# double init should fail in NOPROMPT mode
check_fail denv init ubuntu:18.04
# can the user inspect the config?
check_pass denv config print
# make sure exit codes are propagated through denv
check_fail denv false
# make sure name setting works
check_equal 'denv printenv DENV_NAME' "basename ${PWD}"
# make sure we can set environment variables for non-interactive denv
export MY_ENV_VAR=yes
check_equal 'denv printenv MY_ENV_VAR' 'echo yes'
check_pass denv config env copy MY_VAR
check_fail 'denv printenv MY_ENV_VAR'
check_fail 'denv printenv MY_VAR'
export MY_VAR=yes
check_equal 'denv printenv MY_VAR' 'echo yes'
check_pass denv config env set MY_VAR=no
check_equal 'denv printenv MY_VAR' 'echo no'
# can force re-init of denv
check_pass denv init ubuntu:22.04 --force --name newname
# make sure update was applied
check_equal 'denv printenv DENV_NAME' 'echo newname'
# check user is passed into the container
# for podman, we are waiting for idmap to get into a release
# its already in v4.6.0-rc1
# https://github.com/containers/podman/commit/82a050a58f2ef2cf940c2ef49e1f8c4b17ab8beb
if [ "${DENV_RUNNER}" != "podman" ]; then
  check_equal 'whoami' 'denv whoami'
fi
# "install" a simple executable and make sure it is available non-interactively
mkdir -p .local/bin
cat > .local/bin/hello <<\WORLD
echo world
WORLD
chmod +x .local/bin/hello
check_equal 'denv hello' './.local/bin/hello'
# make sure files written from denv are owned by user outside denv
check_pass denv touch file-from-denv
check_equal 'stat -c %u file-from-denv' "id -u ${USER}"
check_equal 'stat -c %g file-from-denv' "id -g ${USER}"
# make sure denv is in the right os
check_pass denv grep -q '22.04' /etc/os-release
# make sure denv sources the bashrc by getting denv to fail
# to open an interactive shell if the .bashrc is sourced
echo "exit 1" >> .bashrc
check_fail denv
# still can run non-interactive commands since they don't
#  source the bashrc
check_pass denv true
# switch os
check_pass denv config image ubuntu:18.04
# and check
check_pass denv grep -q '18.04' /etc/os-release

if [ -n "${delete:+x}" ]; then
  cd
  rm -r "${workspace}"
fi
