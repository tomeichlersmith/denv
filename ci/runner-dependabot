#!/bin/sh

set -o errexit
set -o nounset

error() {
  printf >&2 "\033[1;31mERROR: \033[0m\033[31m%s\033[0m\n" "$*"
}

inf() {
  printf "\033[1mINFO: \033[0m%s\n" "$*"
}

# fetch the latest release version for the input owner and repo
# https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-the-latest-release
# Args
#  1 : repository
# Output
#  prints the tag to stdout
#  we strip a prefix v if it exists
fetch() {
  gh api \
    -H "Accept: application/vnd.github.json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "/repos/${1}/releases/latest" \
    --jq '.tag_name' \
    | sed 's|^v||'
}

# update the test workflow with the passed runner and version
# Args:
#  1 : repo name we are tracking
#  2 : version of that runner
#  3 : provide to actually apply edit, otherwise just print lines that would change
# Output:
#  Edits the .github/workflows/test.yml in place if 3 args provided,
#  otherwise just prints lines that would be edited to stdout
update() {
  sed_cmd="s|version: [0-9.]* # track ${1}|version: ${2} # track ${1}|"
  if [ -z "${3}" ]; then
    sed -n "${sed_cmd}p" .github/workflows/test.yml
  else
    sed -i "${sed_cmd}" .github/workflows/test.yml
  fi
}

help() {
  cat<<\HELP

  check for new runner versions to test

 USAGE:

  ./ci/runner-dependabot [options]

 OPTIONS
  -h, --help : print this help and exit
  --apply    : actually edit the test workflow yaml instead of
               just printing the lines that have been changed

HELP
}

apply=""
while [ "$#" -gt "0" ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    --apply)
      apply="APPLY"
      ;;
    *)
      help
      error "Unrecognized argument '$1'"
      exit 1
      ;;
  esac
  shift
done

for repo in apptainer/apptainer sylabs/singularity
do
  latest_release="$(set -o errexit; fetch "${repo}")"
  inf "Found '${repo}' release '${latest_release}'"
  update "${repo}" "${latest_release}" "${apply}"
done

