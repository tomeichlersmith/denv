.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "DENV" "1" "Jan 2024" "denv" "User Manual"
.hy
.SH NAME
.PP
denv init
.SH SYNOPSIS
.PP
\f[B]denv init\f[R] [help|-h|\[en]help] IMAGE [WORKSPACE]
[\[en]no-gitignore] [\[en]clean-env|\[en]no-copy-all] [\[en]force]
[\[en]name NAME]
.SH OPTIONS
.PP
\f[B]\f[CB]--help\f[B]\f[R], \f[B]\f[CB]-h\f[B]\f[R], or
\f[B]\f[CB]help\f[B]\f[R] print a short help message for
\f[B]\f[CB]denv\f[B]\f[R] or one of its sub commands
.PP
\f[B]\f[CB]--no-gitignore\f[B]\f[R] do not generate a gitignore file
when setting up a new denv configuration
.PP
\f[B]\f[CB]--clean-env\f[B]\f[R] or \f[B]\f[CB]--no-copy-all\f[B]\f[R]
do not enable copying of all host environment variables within the new
denv.
Later activation (or deactivation) of copying all host environment
variables can be done with \f[B]\f[CB]denv config env all\f[B]\f[R] See
\f[B]denv-config(1)\f[R] for details on
\f[B]\f[CB]denv config\f[B]\f[R].
.PP
\f[B]\f[CB]--force\f[B]\f[R] forces re-initialization of a denv even if
the current workspace has one
.PP
\f[B]\f[CB]--name\f[B]\f[R] sets the name for the denv workspace that is
being initialized to NAME
.SH ARGUMENTS
.PP
\f[B]\f[CB]IMAGE\f[B]\f[R] the name of a container image to use when
starting a container to host the developer environment
.PP
\f[B]\f[CB]WORKSPACE\f[B]\f[R] the directory where the environment
should be stored and configured, used by default as the home directory
within the developer environment so that the environment can also have
its own shell configuration files and \f[C]\[ti]/.local\f[R] paths.
If not provided, we just use the current working directory.
If provided, we make sure it exists, enter it and then continue.
.SH EXAMPLES
.PP
Print the command line help for \f[B]\f[CB]denv init\f[B]\f[R] without
making any edits to the filesystem or beginning the process of
configuring a new denv.
.IP
.nf
\f[C]
denv init help
\f[R]
.fi
.PP
Create a new denv based off the python:3.11 container image within the
current directory, allowing all host environment variables to be copied
into the denv when running.
.IP
.nf
\f[C]
denv init python:3.11
\f[R]
.fi
.PP
Same as above, but do \f[I]not\f[R] allow the host environment variables
to be copied into the denv.
.IP
.nf
\f[C]
denv init --clean-env python:3.11
\f[R]
.fi
.PP
Create a new denv based off the python:3.11 container image and set its
name to \[lq]py311\[rq] rather than the workspace directory\[cq]s name.
.IP
.nf
\f[C]
denv init python:3.11 --name py311
\f[R]
.fi
.PP
Create a new denv in some other location besides the current directory.
Since the directory has the same name as above, the denvs will appear
similar even though their workspace directory (on the host) may be
different names.
.IP
.nf
\f[C]
denv init python:3.11 py311
\f[R]
.fi
.SH SEE ALSO
.PP
\f[B]denv(1)\f[R], \f[B]denv-config(1)\f[R], \f[B]denv-check(1)\f[R]
