.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "DENV" "1" "Jan 2024" "denv" "User Manual"
.hy
.SH NAME
.PP
denv v0.5.0
.SH SYNOPSIS
.PP
\f[B]denv\f[R] {help|-h|\[en]help}
.PP
\f[B]denv\f[R] version
.PP
\f[B]denv\f[R] init [args]
.PP
\f[B]denv\f[R] config [args]
.PP
\f[B]denv\f[R] check [-h, \[en]help] [-q, \[en]quiet]
.PP
\f[B]denv\f[R] [COMMAND] [args\&...]
.SH DESCRIPTION
.PP
\f[B]\f[CB]denv\f[B]\f[R] is a light, POSIX-compliant wrapper around a
few common container managers, allowing the user to efficiently interact
with container-ized envorinments uniformly across systems with different
installed managers.
It has few commands, prioritizing simplicity so that users can easily
and quickly pass their own commands to be run within the specialized and
isolated environment.
.SH COMMANDS
.PP
\f[B]\f[CB]help\f[B]\f[R] prints a short help message and exits.
The aliases \f[B]\f[CB]-h\f[B]\f[R] and \f[B]\f[CB]--help\f[B]\f[R] also
exist for this command.
.PP
\f[B]\f[CB]version\f[B]\f[R] prints the name and version of the
currently installed \f[C]denv\f[R]
.PP
\f[B]\f[CB]init\f[B]\f[R] initialize a new denv.
See \f[B]denv-init(1)\f[R] for details.
.PP
\f[B]\f[CB]config\f[B]\f[R] manipulate the configuration of the current
denv.
See \f[B]denv-config(1)\f[R] for details.
.PP
\f[B]\f[CB]check\f[B]\f[R] check the installation of denv and look for
supported container runners.
See \f[B]denv-check(1)\f[R] for details.
.PP
\f[B]\f[CB]COMMAND\f[B]\f[R] any other command not matching one of the
options above is provided to the configured denv to run within the
containerized environment.
The rest of the command line is passed along with COMMAND so its args
are seen as if they were run manually within the shell of the container.
.SH EXAMPLES
.PP
\f[B]\f[CB]denv\f[B]\f[R] is meant to be used after building a
containerized developer environment.
Look at the online manual for help getting started on developing the
environment itself, but for these examples, we will assume that you
already have an image built in which you wish to develop.
.SS Basic Start-Up
.PP
First, we go into the directory that holds the code we wish to develop
and tell denv that this workspace should be running a specific image for
its developer environment.
.IP
.nf
\f[C]
denv init myuser/myrepo:mytag
\f[R]
.fi
.PP
Then we can open a shell in the denv.
.IP
.nf
\f[C]
denv
\f[R]
.fi
.PP
Now you can build and run programs from within the denv with its
solidified set of software and tools while still editing the code files
themselves with whatever text editor you wish outside of the denv.
The init command produces a configuration file \f[C].denv/config\f[R]
which you can share between users and so it is excluded from the default
\f[C].gitignore\f[R] generated within \f[C].denv\f[R].
All other files within \f[C].denv\f[R] are internal to denv and can only
be modified at your own risk.
.SS \[lq]Remote\[rq] Running
.PP
While most of users will interact with denv from within denv\[cq]s
workspace, sometimes users wish to run a command from outside of the
workspace.
In this case, the default deduction of the workspace can fail;
nevertheless, users can still achieve this goal by providing the path
themselves.
Below, we enter an interactive shell within the denv located at
\f[I]\f[CI]/full/path/to/workspace\f[I]\f[R] without having to enter
that directory.
.IP
.nf
\f[C]
denv_workspace=/full/path/to/workspace denv
\f[R]
.fi
.PP
Astute shell users may notice that we are simply defining an environment
variable for denv, which is correct; however, users should avoid
persisting this definition anywhere since it would effectively prevent
you from having more than one denv on the same host machine.
The other configuration variables do not have this problem since we find
and source the config file on each run of denv, therefore overwriting
any environment variables that may already be defined.
.SH SEE ALSO
.PP
\f[B]denv-init(1)\f[R], \f[B]denv-config(1)\f[R],
\f[B]denv-check(1)\f[R]
.SH ENVIRONMENT
.PP
denv tests the definition and reads the value of a few different
environment variables - allowing the user to modify its behavior in an
advanced way without having to provide many command line arguments.
.PP
\f[B]DENV_DEBUG\f[R] if set, enable xtrace in denv so the user can see
exactly what commands are being run.
.PP
\f[B]DENV_INFO\f[R] if set, print progress information updates to
terminal while denv is running
.PP
\f[B]DENV_RUNNER\f[R] set to the container manager command you wish denv
to use.
This should only be used in the case where multiple managers are
installed and you wish to override the default denv behavior of using
the first runner that it finds available.
.PP
\f[B]DENV_NOPROMPT\f[R] disable all user prompting.
This makes the following decisions in the places where there would be
prompts.
.IP \[bu] 2
\f[B]denv init\f[R] errors out if there is already a denv in the deduced
workspace or if a passed workspace does not exist
.IP \[bu] 2
\f[B]denv init\f[R] and \f[B]denv config image\f[R] will not pull an
image if it already exists
.PP
\f[B]DENV_TAB_COMMANDS\f[R] a space-separated list of commands to
include in tab-completions of denv.
This is helpful if there are a set of common commands you use within the
denv.
.SH FILES
.PP
This part of the manual is an attempt to list and explain the files
within a \f[C].denv\f[R] directory.
.SS config
.PP
The file storing the configuration of the denv related to this
workspace.
While it is plain-text and you can edit it directly.
Editing it with the denv config set of commands is helpful for doing
basic typo- and existence- checking.
The config file is a basic key=value shell file that will be sourced by
denv.
See the FILES section of \f[B]denv-config(1)\f[R] for more detail.
.SS skel-init
.PP
This is an empty file that, if it exists, signals to the entrypoint
executable that the files from /etc/skel have been copied into the denv
home directory.
This prevents accidental overwriting of files that the user may edit as
well as saving time when starting up the container.
.SS images
.PP
This is a directory that holds any image files that may be generated by
the runner denv is using to run the container.
For some runners, it is helpful to explicitly build an image outside of
the cache directory and then run that image file.
This directory holds those images.
It can be deleted if the user wishes to reclaim some disk space;
however, that means any image that are configured to be used by denv
will then be re-downloaded and re-built.
