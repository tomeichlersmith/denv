.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "DENV" "1" "Dec 2023" "denv" "User Manual"
.hy
.SH NAME
.PP
denv v0.4.1
.SH SYNOPSIS
.PP
\f[B]denv\f[R] [help|-h|\[en]help]
.PP
\f[B]denv\f[R] version
.PP
\f[B]denv\f[R] init [args]
.PP
\f[B]denv\f[R] config [args]
.PP
\f[B]denv\f[R] [COMMAND] [args\&...]
.SH DESCRIPTION
.PP
\f[B]\f[CB]denv\f[B]\f[R] is a light, POSIX-compliant wrapper around a
few common container managers, allowing the user to efficiently interact
with container-ized envorinments uniformly across systems with different
installed managers.
It has few commands, prioritizing simplicity so that users can easily
and quickly pass their own commands to be run within the specialized and
isolated environment.
.SH COMMANDS
.PP
\f[B]\f[CB]help\f[B]\f[R] prints a short help message and exits.
The aliases \f[B]\f[CB]-h\f[B]\f[R] and \f[B]\f[CB]--help\f[B]\f[R] also
exist for this command.
.PP
\f[B]\f[CB]version\f[B]\f[R] prints the name and version of the
currently installed \f[C]denv\f[R]
.PP
\f[B]\f[CB]init\f[B]\f[R] initialize a new denv.
See \f[B]denv-init(1)\f[R] for details.
.PP
\f[B]\f[CB]config\f[B]\f[R] manipulate the configuration of the current
denv.
See \f[B]denv-config(1)\f[R] for details.
.PP
\f[B]\f[CB]COMMAND\f[B]\f[R] any other command not matching one of the
options above is provided to the configured denv to run within the
containerized environment.
The rest of the command line is passed along with COMMAND so its args
are seen as if they were run manually within the shell of the container.
.SH SEE ALSO
.PP
\f[B]denv-init(1)\f[R], \f[B]denv-config(1)\f[R]
.SH EXAMPLES
.PP
\f[B]\f[CB]denv\f[B]\f[R] is meant to be used after building a
containerized developer environment.
Look at the online manual for help getting started on developing the
environment itself, but for these examples, we will assume that you
already have an image built in which you wish to develop.
.SS Basic Start-Up
.PP
First, we go into the directory that holds the code we wish to develop
and tell denv that this workspace should be running a specific image for
its developer environment.
.IP
.nf
\f[C]
denv init myuser/myrepo:mytag
\f[R]
.fi
.PP
Then we can open a shell in the denv.
.IP
.nf
\f[C]
denv
\f[R]
.fi
.PP
Now you can build and run programs from within the denv with its
solidified set of software and tools while still editing the code files
themselves with whatever text editor you wish outside of the denv.
The init command produces a configuration file \f[C].denv/config\f[R]
which you can share between users and so it is excluded from the default
\f[C].gitignore\f[R] generated within \f[C].denv\f[R].
All other files within \f[C].denv\f[R] are internal to denv and can only
be modified at your own risk.
.SS Sharing Environment Variables
.PP
The syntax for sharing environment variables with the denv is a bit
terse, so it is helpful to display some examples.
.PP
By default (without \f[B]\f[CB]--no-copy-all\f[B]\f[R] or
\f[B]\f[CB]--clean-env\f[B]\f[R] when running
\f[B]\f[CB]denv init\f[B]\f[R]), \f[B]\f[CB]denv\f[B]\f[R] will copy all
possible environment variables from the host into the denv.
This means one can
.IP
.nf
\f[C]
export foo=bar
printenv foo      # prints out \[dq]bar\[dq]
denv printenv foo # also prints \[dq]bar\[dq]
\f[R]
.fi
.PP
In some situations, this is over-sharing and you can disable this so
that host environment variables are not copied into the denv anymore.
.IP
.nf
\f[C]
denv config env all no
export foo=bar
printenv foo      # prints out \[dq]bar\[dq]
denv printenv foo # does not print anything and returns the error code 1
\f[R]
.fi
.PP
Even with copying all environment variables disabled, one can still copy
specific values from the host or set specific variables to have specific
values for the denv.
.IP
.nf
\f[C]
denv config env copy baz myfoo=mybaz
denv printenv myfoo # prints \[dq]mybaz\[dq]
printenv myfoo      # does not print anything and returns error code 1
denv printenv baz   # not set in host yet so does not print anything
export baz=\[dq]hooray\[dq]
denv printenv baz   # prints \[dq]hooray\[dq]
\f[R]
.fi
.SH INSTALLATION
.SS curl
.PP
If you trust me (or have proofread the install script), you can install
denv with a one-liner.
.IP
.nf
\f[C]
curl -s https://raw.githubusercontent.com/tomeichlersmith/denv/main/install | sh 
\f[R]
.fi
.PP
By default, this installs denv to \[ti]/.local if you are a non-root
user.
You can define the install prefix (\[en]prefix dir), choose to use the
HEAD of the main branch rather than the last release (\[en]next), and
disable the singe-character alias for denv (\[en]simple), all of which
are optional.
.IP
.nf
\f[C]
curl -s https://raw.githubusercontent.com/tomeichlersmith/denv/main/install | \[rs]
  sh -s -- --prefix dir --next --simple
\f[R]
.fi
.SS git
.PP
You can install or update denv by obtaining the source code from the
repository https://github.com/tomeichlersmith/denv either by cloning it
or by downloading one of the releases and then running the installation
command.
.IP
.nf
\f[C]
cd denv
\&./install
\f[R]
.fi
.SH ENVIRONMENT
.PP
denv tests the definition and reads the value of a few different
environment variables - allowing the user to modify its behavior in an
advanced way without having to provide many command line arguments.
.PP
\f[B]DENV_DEBUG\f[R] if set, enable xtrace in denv so the user can see
exactly what commands are being run.
.PP
\f[B]DENV_INFO\f[R] if set, print progress information updates to
terminal while denv is running
.PP
\f[B]DENV_RUNNER\f[R] set to the container manager command you wish denv
to use.
This should only be used in the case where multiple managers are
installed and you wish to override the default denv behavior of using
the first runner that it finds available.
.PP
\f[B]DENV_NOPROMPT\f[R] disable all user prompting.
This makes the following decisions in the places where there would be
prompts.
.IP \[bu] 2
\f[B]denv init\f[R] errors out if there is already a denv in the deduced
workspace
.IP \[bu] 2
\f[B]denv init\f[R] and \f[B]denv config image\f[R] will not pull an
image if it already exists
.SH FILES
.PP
This part of the manual is an attempt to list and explain the files
within a \f[C].denv\f[R] directory.
.SS config
.PP
The file storing the configuration of the denv related to this
workspace.
While it is plain-text and you can edit it directly.
Editing it with the denv config set of commands is helpful for doing
basic typo- and existence- checking.
The config file is a basic key=value shell file that will be sourced by
denv.
This is a security risk and could be updated to a different type of
config file if desired.
.PP
\f[B]denv_name\f[R] the name for this denv
.PP
\f[B]denv_image\f[R] the image to use when running the denv
.PP
\f[B]denv_shell\f[R] the program to run as a interactive shell if
running denv without any arguments
.PP
\f[B]denv_mounts\f[R] a space separated list of extra mounts to mount
into denv when running
.PP
\f[B]denv_env_var_copy_all\f[R] a boolean flag signalling if
\f[B]\f[CB]denv\f[B]\f[R] should copy all possible host environment
variables into the denv (\f[C]\[dq]true\[dq]\f[R]) or not
(\f[C]\[dq]false\[dq]\f[R]).
.PP
\f[B]denv_env_var_copy\f[R] a space-separated list of host environment
variables to copy into the denv.
This is ignored if \f[B]denv_env_var_copy_all\f[R] is
\f[C]\[dq]true\[dq]\f[R].
There are some restrictions on the names of variables that can be used
and so editing this value directly is not recomended.
Use \f[B]\f[CB]denv config env copy\f[B]\f[R] which does this
validation.
.PP
\f[B]denv_env_var_set\f[R] a space-separate list of key=value pairs that
will be set as environment variables within the denv.
These values override any values that could be copied from the host.
There are restrictions on the names and values that can be kept here so
editing this value directly is not recommended.
Use \f[B]\f[CB]denv config env copy\f[B]\f[R] to edit this value while
validating that the rules are followed.
.SS skel-init
.PP
This is an empty file that, if it exists, signals to the entrypoint
executable that the files from /etc/skel have been copied into the denv
home directory.
This prevents accidental overwriting of files that the user may edit as
well as saving time when starting up the container.
.SS images
.PP
This is a directory that holds any image files that may be generated by
the runner denv is using to run the container.
For some runners, it is helpful to explicitly build an image outside of
the cache directory and then run that image file.
This directory holds those images.
It can be deleted if the user wishes to reclaim some disk space;
however, that means any image that are configured to be used by denv
will then be re-downloaded and re-built.
.SH CONTRIBUTING
.PP
Feel free to create a fork of https://github.com/tomeichlersmith/denv
and open a Pull Request with any bug patches or feature improvements.
We aim to keep denv as a single file with optional completion and manual
files in parallel.
.PP
Install shellcheck from https://github.com/koalaman/shellcheck and use
it to make sure denv avoids common shell scripting errors.
.IP
.nf
\f[C]
\&./ci/check
\f[R]
.fi
.PP
Make sure that denv still passes the non-interactive tests.
.IP
.nf
\f[C]
DENV_RUNNER=<your-runner> ./ci/test
\f[R]
.fi
