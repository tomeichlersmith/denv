.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "DENV" "1" "Oct 2023" "denv" "User Manual"
.hy
.SH NAME
.PP
denv v0.3.0
.SH SYNOPSIS
.PP
\f[B]denv\f[R] version
.PP
\f[B]denv\f[R] init [help|-h|\[en]help] IMAGE [WORKSPACE]
[\[en]no-gitignore] [\[en]force] [\[en]name NAME]
.PP
\f[B]denv\f[R] config [help|-h|\[en]help]
.PP
\f[B]denv\f[R] config print
.PP
\f[B]denv\f[R] config image <pull | IMAGE>
.PP
\f[B]denv\f[R] config mounts DIR0 [DIR1 DIR2 \&...]
.PP
\f[B]denv\f[R] config shell SHELL
.PP
\f[B]denv\f[R] [COMMAND] [args\&...]
.SH DESCRIPTION
.PP
\f[B]denv\f[R] is a light, POSIX-compliant wrapper around a few common
container managers, allowing the user to efficiently interact with
container-ized envorinments uniformly across systems with different
installed managers.
.SS OPTIONS
.PP
\f[B]denv\f[R] is light on options since most configuration of the
actual development environment is left to the construction of the image.
Generally, the \f[C]help\f[R] option (with aliases \f[C]-h\f[R] and
\f[C]--help\f[R]) print out a short help message for \f[B]denv\f[R] or
one of its sub commands.
.PP
\f[B]--help\f[R], \f[B]-h\f[R], or \f[B]help\f[R] print a short help
message for \f[B]denv\f[R] or one of its sub commands
.PP
\f[B]--no-gitignore\f[R] do not generate a gitignore file when setting
up a new denv configuration
.PP
\f[B]--force\f[R] forces re-initialization of a denv even if the current
workspace has one
.PP
\f[B]--name\f[R] sets the name for the denv workspace that is being
initialized
.SS ARGUMENTS
.PP
\f[B]IMAGE\f[R] the name of a container image to use when starting a
container to host the developer environment
.PP
\f[B]WORKSPACE\f[R] the directory where the environment should be stored
and configured, used by default as the home directory within the
developer environment so that the environment can also have its own
shell configuration files and \f[B]\[ti]/.local\f[R] paths.
.PP
\f[B]DIR\f[R] directory to add to the list of mounts to be mirrored into
the denv.
These directories are required to be full paths so that the user is
cognizant of what paths will be available in the container and what
arent.
One can use \f[I]realpath\f[R] to deduce a fullpath from a relative path
in a POSIX-compliant way if desired.
.PP
\f[B]SHELL\f[R] the program to use as the interactive shell within the
containerized environment.
.PP
\f[B]COMMAND\f[R] a program to run inside of the containerized
environment (can have its own arguments).
If no COMMAND is given, then SHELL will be executed.
.SH EXAMPLES
.PP
\f[B]denv\f[R] is meant to be used after building a containerized
developer environment.
Look at the online manual for help getting started on developing the
environment itself, but for these examples, we will assume that you
already have an image built in which you wish to develop.
.PP
First, we go into the directory that holds the code we wish to develop
and tell denv that this workspace should be running a specific image for
its developer environment.
.IP
.nf
\f[C]
denv init myuser/myrepo:mytag
\f[R]
.fi
.PP
Then we can open a shell in the denv.
.IP
.nf
\f[C]
denv
\f[R]
.fi
.PP
Now you can build and run programs from within the denv with its
solidified set of software and tools while still editing the code files
themselves with whatever text editor you wish outside of the denv.
The init command produces a configuration file \f[C].denv/config\f[R]
which you can share between users and so it is excluded from the default
\f[C].gitignore\f[R] generated within \f[C].denv\f[R].
All other files within \f[C].denv\f[R] are internal to denv and can only
be modified at your own risk.
.SH INSTALLATION
.SS curl
.PP
If you trust me (or have proofread the install script), you can install
denv with a one-liner.
.IP
.nf
\f[C]
curl -s https://raw.githubusercontent.com/tomeichlersmith/denv/main/install | sh 
\f[R]
.fi
.PP
By default, this installs denv to \[ti]/.local if you are a non-root
user.
You can define the install prefix (\[en]prefix dir), choose to use the
HEAD of the main branch rather than the last release (\[en]next), and
disable the singe-character alias for denv (\[en]simple), all of which
are optional.
.IP
.nf
\f[C]
curl -s https://raw.githubusercontent.com/tomeichlersmith/denv/main/install | \[rs]
  sh -s -- --prefix dir --next --simple
\f[R]
.fi
.SS git
.PP
You can install or update denv by obtaining the source code from the
repository https://github.com/tomeichlersmith/denv either by cloning it
or by downloading one of the releases and then running the installation
command.
.IP
.nf
\f[C]
cd denv
\&./install
\f[R]
.fi
.SH ENVIRONMENT
.PP
denv tests the definition and reads the value of a few different
environment variables - allowing the user to modify its behavior in an
advanced way without having to provide many command line arguments.
.PP
\f[B]DENV_DEBUG\f[R] if set, enable xtrace in denv so the user can see
exactly what commands are being run.
.PP
\f[B]DENV_INFO\f[R] if set, print progress information updates to
terminal while denv is running
.PP
\f[B]DENV_RUNNER\f[R] set to the container manager command you wish denv
to use.
This should only be used in the case where multiple managers are
installed and you wish to override the default denv behavior of using
the first runner that it finds available.
.PP
\f[B]DENV_NOPROMPT\f[R] disable all user prompting.
This makes the following decisions in the places where there would be
prompts.
.IP \[bu] 2
`denv init' errors out if there is already a denv in the deduced
workspace
.IP \[bu] 2
`denv init' and `denv config image' will not pull an image if it already
exists
.SH FILES
.PP
This part of the manual is an attempt to list and explain the files
within a \f[C].denv\f[R] directory.
.SS config
.PP
The file storing the configuration of the denv related to this
workspace.
While it is plain-text and you can edit it directly.
Editing it with the denv config set of commands is helpful for doing
basic typo- and existence- checking.
The config file is a basic key=value shell file that will be sourced by
denv.
This is a security risk and could be updated to a different type of
config file if desired.
.PP
\f[B]denv_name\f[R] the name for this denv
.PP
\f[B]denv_image\f[R] the image to use when running the denv
.PP
\f[B]denv_shell\f[R] the program to run as a interactive shell if
running denv without any arguments
.PP
\f[B]denv_mounts\f[R] a space separated list of extra mounts to mount
into denv when running
.SS skel-init
.PP
This is an empty file that, if it exists, signals to the entrypoint
executable that the files from /etc/skel have been copied into the denv
home directory.
This prevents accidental overwriting of files that the user may edit as
well as saving time when starting up the container.
.SS images
.PP
This is a directory that holds any image files that may be generated by
the runner denv is using to run the container.
For some runners, it is helpful to explicitly build an image outside of
the cache directory and then run that image file.
This directory holds those images.
It can be deleted if the user wishes to reclaim some disk space;
however, that means any image that are configured to be used by denv
will then be re-downloaded and re-built.
.SH CONTRIBUTING
.PP
Feel free to create a fork of https://github.com/tomeichlersmith/denv
and open a Pull Request with any bug patches or feature improvements.
We aim to keep denv as a single file with optional completion and manual
files in parallel.
.PP
Install shellcheck from https://github.com/koalaman/shellcheck and use
it to make sure denv avoids common shell scripting errors.
.IP
.nf
\f[C]
\&./ci/check
\f[R]
.fi
.PP
Make sure that denv still passes the non-interactive tests.
.IP
.nf
\f[C]
DENV_RUNNER=<your-runner> ./ci/test
\f[R]
.fi
